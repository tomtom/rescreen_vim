*rescreen.txt*  Yet another plugin that uses screen to evaluate code
                Author: Thomas Link, micathom AT gmail com?subject=vim

This plugin is supposed to be used from GVIM. It sends code to a repl running 
inside a screen session running in a terminal application.

Use the |:Rescreen| command to initialize a screen session. If no repl is 
defined for the current filetype, bash is used.

Default maps (see |g:rescreen#maps|):

    <c-cr> ... Send the current line or the visual selection to the current 
               screen session
    gx.    ... Send the current line to the current screen session
    gx{motion} ... Send {motion} lines to the current screen session


Background:
Why another screen-based plugin? The code for this plugin was originally 
created for my rcom_vim plugin to fit its requirements. Since it has proven 
useful, I put the code into a plugin of its own.


-----------------------------------------------------------------------
Install~

Edit the vba file and type: >

    :so %

See :help vimball for details. If you have difficulties or use vim 7.0, 
please make sure, you have the current version of vimball (vimscript 
#1502) installed or update your runtime.


========================================================================
Contents~

        :Rescreen ...................... |:Rescreen|
        g:rescreen#cleanup_on_exit ..... |g:rescreen#cleanup_on_exit|
        g:rescreen#windows ............. |g:rescreen#windows|
        g:rescreen#mapleader ........... |g:rescreen#mapleader|
        g:rescreen#maps ................ |g:rescreen#maps|
        g:rescreen#encoding ............ |g:rescreen#encoding|
        g:rescreen#cmd ................. |g:rescreen#cmd|
        g:rescreen#filetype_map ........ |g:rescreen#filetype_map|
        g:rescreen#repltype_map ........ |g:rescreen#repltype_map|
        g:rescreen#session_name_expr ... |g:rescreen#session_name_expr|
        g:rescreen#terminal ............ |g:rescreen#terminal|
        g:rescreen#shell ............... |g:rescreen#shell|
        g:rescreen#wait ................ |g:rescreen#wait|
        g:rescreen#convert_path ........ |g:rescreen#convert_path|
        g:rescreen#init_wait ........... |g:rescreen#init_wait|
        g:rescreen#wait ................ |g:rescreen#wait|
        g:rescreen#clear ............... |g:rescreen#clear|
        g:rescreen#sep ................. |g:rescreen#sep|
        g:rescreen#send_after .......... |g:rescreen#send_after|
        g:rescreen#timeout ............. |g:rescreen#timeout|
        g:rescreen#maxsize ............. |g:rescreen#maxsize|
        g:rescreen#cd .................. |g:rescreen#cd|
        g:rescreen#in_screen ........... |g:rescreen#in_screen|
        rescreen#Operator .............. |rescreen#Operator()|
        rescreen#GetSelection .......... |rescreen#GetSelection()|
        :Requit ........................ |:Requit|
        :Resend ........................ |:Resend|
        rescreen#ChangeMapLeader ....... |rescreen#ChangeMapLeader()|
        prototype.IsSupportedMode
        rescreen#Init .................. |rescreen#Init()|
        rescreen#Exit .................. |rescreen#Exit()|
        rescreen#ExitAll ............... |rescreen#ExitAll()|
        rescreen#Send .................. |rescreen#Send()|
        rescreen#Complete .............. |rescreen#Complete()|
        rescreen#Get ................... |rescreen#Get()|


========================================================================
plugin/rescreen.vim~

                                                    *:Rescreen*
:Rescreen[!] [OPTIONS] [REPLTYPE] [CMD]
    Prepare a session using REPLTYPE for the current buffer. If no 
    REPLTYPE is given, use the default repl (see |g:rescreen#repltype_map|).
    This command can also be used to switch between REPLs.

    Send CMD to the repl. CMD is also used to define the session name.

    With a optional bang (!), start the session immediatly.

    Arguments can also be passed as OPTIONS:
      -[no-]default ... The current buffer's default repl
      -[no-]wait    ... Wait for the user to press ENTER when done
      -repltype=REPLTYPE
      -mode=MODE


========================================================================
autoload/rescreen.vim~

                                                    *g:rescreen#cleanup_on_exit*
g:rescreen#cleanup_on_exit     (default: 1)
    If true, close all running sessions when leaving VIM.

                                                    *g:rescreen#windows*
g:rescreen#windows             (default: has('win16') || has('win32') || has('win64') || has('win95'))

                                                    *g:rescreen#mapleader*
g:rescreen#mapleader           (default: 'gx')
    Map leader used in |g:rescreen#maps|.

                                                    *g:rescreen#maps*
g:rescreen#maps                (default: {...})
    Key maps.

                                                    *g:rescreen#encoding*
g:rescreen#encoding            (default: '')
    If non-empty, use |iconv()| to recode input.

                                                    *g:rescreen#cmd*
g:rescreen#cmd                 (default: executable('screen') ? 'screen' : '')
    The name of the screen executable.
    If the variable is user-defined, trust its value.

                                                    *g:rescreen#filetype_map*
g:rescreen#filetype_map        (default: {...})
    A map of FILETYPE => REPLTYPE (see |g:rescreen#repltype_map|).

                                                    *g:rescreen#repltype_map*
g:rescreen#repltype_map        (default: {...})
    A map REPLTYPE => REPL. The key "*" defines the default/fallback 
    REPL, which is bash.
    REPLTYPE defaults to 'filetype' after mapping it to 
    |g:rescreen#filetype_map|.

                                                    *g:rescreen#session_name_expr*
g:rescreen#session_name_expr   (default: '"rescreen_'. v:servername .'_". self.repltype ."_". self.initial_cli_args')
    A vim expression that is |eval()|uated to get the session name.
    Using this default expression, rescreen supports only one repl of 
    a given type per VIM instance and screen sessions are not shared 
    across several VIM instances.

                                                    *g:rescreen#terminal*
g:rescreen#terminal            (default: '')
    The terminal used to run |g:rescreen#cmd|.
    If GUI is running, also start a terminal.

    Default values with GUI running:
        Windows :: mintty
        Linux :: gnome-terminal

                                                    *g:rescreen#shell*
g:rescreen#shell               (default: 'bash')

                                                    *g:rescreen#wait*
g:rescreen#wait                (default: ' || (echo -n "Press ENTER"; read)')
    Shell command that is appended to the initial argument when adding 
    the -wait option to |:Rescreen|.
    The default value will wait for user input only on errors.

                                                    *g:rescreen#convert_path*
g:rescreen#convert_path        (default: g:rescreen#windows ? 'system(''cygpath -m "%s"'')' : '')
    When using the Windows version of GVIM, assume that paths have to 
    be converted via cygpath.

    You might want to change this value when not using the cygwin's 
    screen.

                                                    *g:rescreen#init_wait*
g:rescreen#init_wait           (default: 1)
    How long to wait after starting the terminal.

                                                    *g:rescreen#wait*
g:rescreen#wait                (default: '500m')
    How long to wait after executing a command.

                                                    *g:rescreen#clear*
g:rescreen#clear               (default: 0)
    If true, always clear the screen before evaluating some input.

                                                    *g:rescreen#sep*
g:rescreen#sep                 (default: 0)
    Number of empty lines to separate commands.

                                                    *g:rescreen#send_after*
g:rescreen#send_after          (default: '')
    A key sequence sent to the terminal via screen's stuff command 
    after evaluating input.

                                                    *g:rescreen#timeout*
g:rescreen#timeout             (default: 5)
    Timeout when waiting for a command to finish to retrieve 
    its output.

                                                    *g:rescreen#maxsize*
g:rescreen#maxsize             (default: 2048)

                                                    *g:rescreen#cd*
g:rescreen#cd                  (default: 'cd')
    cd command.

                                                    *g:rescreen#in_screen*
g:rescreen#in_screen           (default: !has('gui_running') &&  $TERM =~ '^screen')

                                                    *rescreen#Operator()*
rescreen#Operator(type, ...)
    For use as an operator. See 'opfunc'.

                                                    *rescreen#GetSelection()*
rescreen#GetSelection(mode, ...)
    rescreen#GetSelection(mode, ?mbeg="'<", ?mend="'>", ?opmode='selection')
    mode can be one of: selection, lines, block

                                                    *:Requit*
:Requit[!]
    TLogVAR self.repl
    Buffer-local
    Stop the current screen session.
    With a bang (!), stop all screen sessions for the current 
    buffer.

                                                    *:Resend*
:Resend TEXT
    Buffer-local
    Send TEXT to the current screen session.

                                                    *rescreen#ChangeMapLeader()*
rescreen#ChangeMapLeader(self, mapleader)

prototype.IsSupportedMode

                                                    *rescreen#Init()*
rescreen#Init(...)

                                                    *rescreen#Exit()*
rescreen#Exit()
    Stop the current screen session.

                                                    *rescreen#ExitAll()*
rescreen#ExitAll()
    Stop all screen session for the current buffer.

                                                    *rescreen#Send()*
rescreen#Send(lines, ?repltype, ?mode)
    Send lines to a REPL. Use repltype if provided. Otherwise use the 
    current screen session.

                                                    *rescreen#Complete()*
rescreen#Complete(findstart, base)

                                                    *rescreen#Get()*
rescreen#Get(var, ...)



vim:tw=78:fo=tcq2:isk=!-~,^*,^|,^":ts=8:ft=help:norl:
